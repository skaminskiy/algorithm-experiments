Professor Patrick wishes to find the shortest possible route from Phoenix to Indianapolis.
Given a road map of the United States on which the distance between
each pair of adjacent intersections is marked.

Variants:

1) Single-destination shortest-paths problem: Find a shortest path to a given destination
vertex t from each vertex . By reversing the direction of each edge in
the graph, we can reduce this problem to a single-source problem.

2) Single-pair shortest-path problem: Find a shortest path from u to  for given
vertices u and . If we solve the single-source problem with source vertex u,
we solve this problem also. Moreover, all known algorithms for this problem
have the same worst-case asymptotic running time as the best single-source
algorithms.

3) All-pairs shortest-paths problem: Find a shortest path from u to  for every pair
of vertices u and . Although we can solve this problem by running a singlesource
algorithm once from each vertex, we usually can solve it faster. Additionally,
its structure is interesting in its own right. Chapter 25 addresses the
all-pairs problem in detail.


Dijkstra’s algorithm solves the single-source shortest-paths problem on a weighted,
directed graph G = (V,E) for the case in which all edge weights are nonnegative. Dijkstra’s algorithm is a greedy algorithm. It has a lower running time than the Bellman-Ford algorithm but requires the edge
weights to be nonnegative, 

Floyd-Warshall algorithm, which finds shortest paths between all pairs of vertices, is a dynamic-programming algorithm.

Bellman-Ford algorithm, which solves the single-source shortest-paths problem in the general case in which edges can have negative weight.
The Bellman-Ford algorithm is remarkably simple, and it has the further benefit of detecting whether a negative-weight cycle is reachable from the source.
The Bellman-Ford algorithm runs in time O(VE)